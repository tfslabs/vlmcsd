name: Build

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    # release:
    #     types: [published]
    workflow_dispatch:

jobs:
    build-linux:
        name: Build Linux
        runs-on: ubuntu-latest
        strategy:
            matrix:
                arch:
                    - { name: amd64, target: x86_64-linux-gnu, apt: gcc }
                    - {
                          name: arm64,
                          target: aarch64-linux-gnu,
                          apt: gcc-aarch64-linux-gnu,
                      }
                    - {
                          name: ppc64le,
                          target: powerpc64le-linux-gnu,
                          apt: gcc-powerpc64le-linux-gnu,
                      }
                    - {
                          name: s390x,
                          target: s390x-linux-gnu,
                          apt: gcc-s390x-linux-gnu,
                      }
                    - {
                          name: riscv64,
                          target: riscv64-linux-gnu,
                          apt: gcc-riscv64-linux-gnu,
                      }

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install cross-compilation toolchain
              run: |
                  sudo apt-get update
                  sudo apt-get install -y ${{ matrix.arch.apt }}

            - name: Build all & vlmcsdmulti
              run: |
                  if [ "${{ matrix.arch.name }}" = "amd64" ]; then
                    # Native build for amd64
                    make clean
                    make all vlmcsdmulti STRIP=0
                  else
                    # Cross-compilation for other architectures
                    make clean
                    make all vlmcsdmulti CC=${{ matrix.arch.target }}-gcc STRIP=0
                  fi

            - name: Prepare artifacts
              run: |
                  mkdir -p artifacts/linux-${{ matrix.arch.name }}
                  cp -r bin artifacts/linux-${{ matrix.arch.name }}
                  cp -r lib artifacts/linux-${{ matrix.arch.name }}

            - name: Upload Linux artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: vlmcsd-linux-${{ matrix.arch.name }}
                  path: artifacts/linux-${{ matrix.arch.name }}/
                  retention-days: 30

    build-windows:
        name: Build Windows
        runs-on: ubuntu-latest
        strategy:
            matrix:
                arch:
                    - {
                          name: amd64,
                          target: x86_64-w64-mingw32,
                          apt: gcc-mingw-w64-x86-64,
                      }
                    - {
                          name: x86,
                          target: i686-w64-mingw32,
                          apt: gcc-mingw-w64-i686,
                      }

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install MinGW cross-compilation toolchain
              run: |
                  sudo apt-get update
                  sudo apt-get install -y ${{ matrix.arch.apt }}

            - name: Build all & vlmcsdmulti for Windows
              run: |
                  make clean
                  make all vlmcsdmulti CC=${{ matrix.arch.target }}-gcc STRIP=0

            - name: Prepare artifacts
              run: |
                  mkdir -p artifacts/windows-${{ matrix.arch.name }}
                  cp -r bin artifacts/windows-${{ matrix.arch.name }}
                  cp -r lib artifacts/windows-${{ matrix.arch.name }}

            - name: Upload Windows artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: vlmcsd-windows-${{ matrix.arch.name }}
                  path: artifacts/windows-${{ matrix.arch.name }}/
                  retention-days: 30

    # release:
    #     name: Create Release Assets
    #     runs-on: ubuntu-latest
    #     needs: [build-linux, build-windows]
    #     if: github.event_name == 'release'

    #     steps:
    #         - name: Download all artifacts
    #           uses: actions/download-artifact@v4
    #           with:
    #               path: artifacts/

    #         - name: Create release archives
    #           run: |
    #               cd artifacts/
    #               for dir in */; do
    #                 archive_name="${dir%/}.tar.gz"
    #                 tar -czf "../$archive_name" -C "$dir" .
    #               done
    #               cd ..
    #               ls -la *.tar.gz

    #         - name: Upload release assets
    #           uses: softprops/action-gh-release@v1
    #           with:
    #               files: |
    #                   *.tar.gz
    #           env:
    #               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
